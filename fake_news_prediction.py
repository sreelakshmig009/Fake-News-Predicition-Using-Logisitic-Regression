# -*- coding: utf-8 -*-
"""Fake news prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/162DegWNQ8nSAT1KLYFGzh2Y7WtgG7dwB

**Importing the dependencies**
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

"""**Data Pre-Processing**"""

#load the dataset into pandas dataframe
news_dataset = pd.read_csv('/content/train.csv')

#loading the number of rows(number of news articles) and coloumns in the dataset
news_dataset.shape
# this pre-trained dataset from kaggle has 20,800 articles(rows) and 5 columns

#print the first five rows of the dataset
news_dataset.head()

# counting the number of missing values in the dataset
news_dataset.isnull().sum()

# replace the null values with empty string
# as we have a large dataset, we're doing this process;need not be applied in case of a small dataset
news_dataset = news_dataset.fillna('')

# storing the combined value of title and author under a new column called content
news_dataset['content'] = news_dataset['author']+'  '+news_dataset['title']

# this is how our new column content would be
print(news_dataset['content'])

# seperating the label column and storing it in a seperate label
X = news_dataset.drop(columns = 'label',axis = 1)
# for removing a row, axis = 0 and for a column ,axis = 1
Y = news_dataset['label']

print(X) # has all the other values except label(when we print it,not all will be displayed due to space constraint)
print(Y) # only has label values

"""**Stemming**

"""

port_stem = PorterStemmer()

# this function is written to decrease code redundancy 
def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z ]',' ',content) # replace numbers or special characters with whitespace
  stemmed_content = stemmed_content.lower() # convert the all stemmed data to lowercase for uniformity
  stemmed_content = stemmed_content.split() # split and converted to list values
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')] # removes all the stopwords
  stemmed_content = '  '.join(stemmed_content)
  return stemmed_content

# applying the stemming function to the content column a.k.a function call
news_dataset['content'] = news_dataset['content'].apply(stemming)

print(news_dataset['content'])

# seperating data and label after stemming
X = news_dataset['content'].values
Y = news_dataset['label'].values
print(X)
print(Y)

"""**Vectorization**"""

vectorizer = TfidfVectorizer()# counts the number of times a particular word occurs in a text
vectorizer.fit(X)
# converting X to their respective feature vectors(no need to do this with Y as it is already numerical)
X = vectorizer.transform(X)

print(X)

"""(Feeding this vectorized input to the ML model)

**Splitting the dataset to training and test data**
"""

# splitting the respective data into training data and testing data
# here we have considered 80% of the inout data to be training data and the rest 20% data to be test data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify=Y, random_state=2)

"""**Training the Model using Logisitic Regression**"""

model = LogisticRegression()

model.fit(X_train, Y_train)

"""**Evaluation**"""

# finding the accuracy score for training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train) # both values are compared and accuracy score is generated

print('Accuracy score of the training data : ', training_data_accuracy)

# finding the accuracy score for test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)
# accuracy score of test data is more important than accuracy score of training data because this will tell us how good our model works

"""**Making a Predictive System**

When we provide a new data to our model ,it should tell us whether it is real news or fake news
"""

X_new = X_test[5] # change the value of the index of X_test to test some other data

prediction = model.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('The news is Real')
else:
  print('The news is Fake')

# checking whether the prediction is correct
print(Y_test[5])